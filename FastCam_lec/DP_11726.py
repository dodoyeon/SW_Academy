'''
동적 계획법 (Dynamic Programming) 과 분할 정복 (Divide and Conquer)
** 둘은 다른 알고리즘이지만 비슷한 부분이 많기 때문에 같이 공부

DP (뭔가 나동빈이랑은 다르게 말하네)
    - 입력 크기가 작은 부분 문제를 해결한 후 그 해를 저장하고 해당 결과값을 이용해 더 큰 부분문제를 해결하는 방식
    - 상향식 접근법
    - Memoization 기법 사용
        : 이전에 계싼한 값을 저장하여 다시 계산하지 않도록하여 실행속도를 빠르게 함.
분할 정복
    - 문제를 못나눌 때까지 나누어 풀고 각각 합병하는 방식, 부분문제는 서로 중복되지 않음
    - 하향식 접근법 : 일반적으로 재귀용법으로 구현

** 공통점과 차이점
1. 공통점
    - 문제를 작게 쪼개서 가장작은 단위 문제로 분할

2. 차이점
    - DP 는 자른 문제가 중복되기 때문에 memoization 저장을 사용하고
    - 분할정복은 중복되지 않기 때문에 값을 저장하지 않는다.
'''

# 예시 11726 2xn 타일링
def n2(n):
    if n== 1:
        return 1
    d = [0]*n
    d[0], d[1] = 1, 2
    for i in range(2, n):
        d[i] = d[i-1] +d[i-2]
    return d[-1]%10007

n = int(input())
print(n2(n))

'''
DP 는 점화식을 사용하는 것이다..! (근데 점화식 세우는거 너무 어려워ㅠㅜ)
** 점화식 : 이웃하는 항 사이 성립하는 관계를 나타내는 식.

일단은 어떤 수열로 나열될 수 있는지 리스트를 구하는 것이 우선.

코드 작성시
1. 빈 리스트 d 만들기
2. 초기값을 설정하기
3. 점화식을 기반으로 계산값 적용하기
4. 특정 입력값에 따른 계산값을 리스트에서 가져오기
'''